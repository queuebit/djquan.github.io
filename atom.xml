<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Daniel Quan]]></title>
  <link href="http://djquan.github.io/atom.xml" rel="self"/>
  <link href="http://djquan.github.io/"/>
  <updated>2013-05-15T20:13:18-04:00</updated>
  <id>http://djquan.github.io/</id>
  <author>
    <name><![CDATA[Daniel Quan]]></name>
    <email><![CDATA[djquan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Migration from Tumblr]]></title>
    <link href="http://djquan.github.io/blog/2013/05/15/migration-from-tumblr/"/>
    <updated>2013-05-15T15:31:00-04:00</updated>
    <id>http://djquan.github.io/blog/2013/05/15/migration-from-tumblr</id>
    <content type="html"><![CDATA[<p>I will slowly be making a move from tumblr to octopress.</p>

<p>Octopress is a framework built on Jekyll, a static blog generator.</p>

<p>I think as I get more familiar with it, the switch to octopress will allow me a greater ability to customize the site.
Moreover, octopress (and jekyll) allow me a greater freedom in how I write my posts.</p>

<p>I have been trying for the past few hours on ways of importing my older posts from tumblr.  I&rsquo;ve tried a variety of methods, including <a href="http://jekyllrb.com/docs/migrations/">jekyll-import</a>
but have run into issues.  I&rsquo;ll keep playing around with it though!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tmux]]></title>
    <link href="http://djquan.github.io/blog/2013/05/14/tmux/"/>
    <updated>2013-05-14T15:55:00-04:00</updated>
    <id>http://djquan.github.io/blog/2013/05/14/tmux</id>
    <content type="html"><![CDATA[<p><strong>Intro to tmux</strong></p>


<p>tmux is a terminal multiplexer. &nbsp;At it&#8217;s most basic, it allows you create windows and panes inside a tmux session. &nbsp;Each window and pane is a separate instance of a terminal. &nbsp;</p>


<p>I&#8217;ll try to explain why tmux works <em>for me</em>, and I&#8217;ll finish with links on how to set it up. &nbsp;</p>


<p>This is not aimed to be a guide on setting up tmux, or how to use tmux. &nbsp;It is just an explanation of why it has become essential<em> to me</em>, and why it is worth a try. &nbsp;There are alternatives; iterm2 has it&#8217;s own way of handling panes; there is also screen. &nbsp;I haven&#8217;t tried either, and I&#8217;m not implying that tmux is better than either. &nbsp;</p>


<p><span>Also, I am still a novice; I have a tremendous amount to learn about improving my workflow.</span></p>


<p><a href="https://dl.dropboxusercontent.com/u/6565481/tmux.png"><img alt="image" src="http://media.tumblr.com/7ca4b1bdf4c5fb7d5ab1d5dfe10cad9a/tumblr_inline_mmt29dEyHR1qz4rgp.png" /></a></p>


<p><strong>Panes, Panes, Panes.</strong></p>


<p>Since I began to code through test-driven-development, I almost always code so that I can see both my test file and the code that it is testing. &nbsp;In sublime, this involved using a two column layout. &nbsp;In vim, I accomplished this through split panes. &nbsp;It is important to see the tests and the code at the same time. &nbsp;</p>


<p>tmux lets me keep a command prompt as a pane in the lower 20% of the screen. &nbsp;This is useful in so many ways. &nbsp;I use it most often for running tests. &nbsp;Using the vim add-on <a href="https://github.com/epeli/slimux">slimux</a>, I can easily send commands to any pane or window I want. &nbsp;Telling that pane to run a test generally requires no more than two keystrokes.</p>


<p>An amazing plugin for Sublime that lets you test is RubyTest. &nbsp;<span>However, tmux allows me to do much more than test. &nbsp;It gives me a full terminal to use that I can expand anytime I want. &nbsp;For example, if I edited a User model to include some database migrations, I would need to run rake db:migrate and rake db:test:prepare before running my actual tests. &nbsp;In Sublime, this requires switching to the terminal app and running those commands, and switching back. &nbsp; In vim, I could accomplish this with :! rake&#8230;.but the resulting output would take up the screen until I pressed enter.</span></p>


<p><span>With tmux, I can do both of these from my text editor without losing focus of my text editor. &nbsp;I am able to see the results of the test and keep typing code.</span></p>


<p>The main advantage of tmux is that I don&#8217;t have to leave tmux for routine editing. &nbsp;Of course, my workflow would be different if I was doing front-end work (designing the site, making sure javascript worked, etc).&nbsp;</p>


<p><strong>Windows</strong></p>


<p>Windows are pretty much just tabs. &nbsp;To my knowledge, tmux doesn&#8217;t really add anything crazy to it, but they are there.&nbsp;</p>


<p><strong>Persistence</strong></p>


<p>tmux has sessions, and it stores persistence. &nbsp;Unless I restart my computer(which does end the session), when I open tmux again, my session will still remain there. &nbsp;Tmux doesn&#8217;t <em>save&nbsp;</em>my session. &nbsp;It keeps running it and by opening tmux again, I am just re-connecting to it.&nbsp;</p>


<p>There are at least two major advantages of this. &nbsp;First, I can quit terminal and come back to my work later without any hesitation. &nbsp;Second, when I return, apps that were running will still be running. &nbsp;I don&#8217;t need to restart my rails server. &nbsp;I don&#8217;t need to open up my rails console again. &nbsp;</p>


<p><strong>Sessions</strong></p>


<p>You can have as many sessions as you want. &nbsp;For me, this means having different projects as different sessions. &nbsp;This allows me to switch between them (or work on both of them) at once really easily. &nbsp;Persistence, as mentioned above, becomes incredibly more useful when dealing with multiple projects.</p>


<p><strong>Negatives</strong></p>


<p>Copy and paste from the Mac clipboard does require an additional program (reattach-to-user-namespace) and work, but it is manageable and worth it.&nbsp;</p>


<p><strong>Plugins worth mentioning</strong></p>


<p><a href="https://github.com/aziz/tmuxinator">Tmuxinator</a> allows you to set defaults and save those projects. &nbsp; Slimux lets you send commands to specific panes. &nbsp;<a href="https://github.com/jgdavey/vim-turbux">Vim-turbux</a> allows you to send testing commands to panes.</p>


<p><strong>Conclusion</strong></p>


<p>Sorry if any of it came off as confusing; I definitely recommend going through a few of the resources below to get a better understanding of tmux&#8217;s power.</p>


<p>I do love working in tmux, but like vim, there is a slight learning curve before becoming really effective with it. &nbsp;Like vim, the preset defaults aren&#8217;t terrific.</p>


<p>The above reasons are why tmux works well for me. &nbsp;There are a lot of reasons to switch that I haven&#8217;t covered, like working on an <a href="http://bergie.iki.fi/blog/six-weeks-working-android/">android tablet</a> efficiently or using it to <a href="http://pivotallabs.com/how-we-use-tmux-for-remote-pair-programming/">pair program</a>. &nbsp;</p>


<p><strong>Resources</strong></p>


<p>Below are some pretty good resources on experimenting with .tmux and setting it up well. &nbsp;$ indicates a paid resource.</p>


<ul>
<li><span>$&nbsp;<a href="http://pragprog.com/book/bhtmux/tmux">tmux: Productive Mouse Free Development</a> is probably the best guide on tmux there is.&nbsp;</span></li>
<li><span>$ <a href="https://learn.thoughtbot.com/products/4-humans-present-tmux">Thoughtbot - Humans Present Tmux</a></span></li>
<li><a href="http://robots.thoughtbot.com/post/2641409235/a-tmux-crash-course"><span>Thoughtbot - Tmux Crash Course</span></a></li>
<li><span><a href="http://robots.thoughtbot.com/post/19398560514/how-to-copy-and-paste-with-tmux-on-mac-os-x">Thoughtbot - How to Copy and Paste with tmux</a><br /></span></li>
<li><a href="http://www.youtube.com/watch?v=vHdiXoHKSgU"><span>LA Ruby Conf Talk</span></a></li>
<li><span><a href="http://thechangelog.com/episode-0-7-3-tmux-with-brian-hogan-and-josh-clayton/">The Changelog, Tmux with Brian Hogan and Josh Clayton</a></span></li>
<li>Other people&#8217;s dotfiles. &nbsp;I wouldn&#8217;t recommend <a href="https://github.com/djquan/dotfiles">mine</a>; Josh Clayton is a proficient user and has all <a href="https://github.com/joshuaclayton/dotfiles">his dotfiles up.<br /></a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone, round 1]]></title>
    <link href="http://djquan.github.io/blog/2013/05/14/backbone-round-1/"/>
    <updated>2013-05-14T12:57:00-04:00</updated>
    <id>http://djquan.github.io/blog/2013/05/14/backbone-round-1</id>
    <content type="html"><![CDATA[<p>There are a lot of javascript frameworks out there. &nbsp;<a href="http://coding.smashingmagazine.com/2012/07/27/journey-through-the-javascript-mvc-jungle/">This article</a> and <a href="http://todomvc.com/">this site</a> helped to clear up some of my confusion.&nbsp;</p>


<p>I just had my first introduction to these frameworks/libraries with Code School&#8217;s Anatomy of Backbone.js, Part I. &nbsp;<span>Like most of their courses, it was a good </span><strong>introduction</strong><span> to the material that convinced me that I need to learn a lot more about it.</span></p>


<p>PeepCode has released a new screencast on troubleshooting; it was pretty informative. &nbsp;They created a graphic on it <a href="https://peepcode.com/blog/2013/seven-troubleshooting-strategies-poster/img/7strategiesposter.pdf">here</a>. &nbsp;</p>


<p>Mackup, as described in the <a href="http://quan.io/post/50178150864/obligatory-first-pull-request-post-for-those-that">previous post</a>, was featured on <a href="http://lifehacker.com/mackup-backs-up-and-syncs-your-application-settings-acr-504512985">lifehacker</a>!</p>


<p><span>Log for 5/12 - 5/14</span></p>


<ul>
<li>PeepCode - Episode 84, Troubleshooting</li>
<li>A few project euler problems</li>
<li>tmux: Productive Mouse Free Development by Brian Hogan</li>
<li>Started Practical Vim by Drew Neil</li>
<li>CodeSchool - Anatomy of Backbone.js, Part I</li>
</ul>


<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pull Request]]></title>
    <link href="http://djquan.github.io/blog/2013/05/11/pull-request/"/>
    <updated>2013-05-11T16:03:00-04:00</updated>
    <id>http://djquan.github.io/blog/2013/05/11/pull-request</id>
    <content type="html"><![CDATA[<p>Obligatory first pull request post! For those that don&#8217;t know, a pull request is a way of contributing back to the open source community. &nbsp;You request that the creator/maintainer&nbsp;of a particular piece of software incorporate your code into the overall code to add a feature or fix a bug. &nbsp;</p>


<p>My first pull request was to <a href="https://github.com/lra/mackup">mackup</a>, a program that lets you keep all your dotfiles (specific configuration files for a variety of apps) in sync through Dropbox. &nbsp;This is an entirely easy thing to do without this software through creating symbolic links, but mackup automates this process, cutting down a lot of time and commands. &nbsp;My contribution was adding support for tmuxinator and teamocil dotfiles. &nbsp;It was only about five lines of additional code, but it still feels good to add features onto a piece of software I use regularly. &nbsp; &nbsp;&nbsp;</p>


<p>Once again, I&#8217;ll recommend Thoughtbot&#8217;s Learn Prime. &nbsp;I&#8217;m currently doing their Test Driven Rails course, and it has been pretty informative so far. &nbsp;It&#8217;s also pretty nice to learn about testing from one of the contributors to FactoryGirl. &nbsp;With learn prime, you get posting privileges to the new <a href="http://forum.thoughtbot.com/">thoughtbot forums</a>. &nbsp;It&#8217;s pretty nice having a a lifeline to the thoughtbot team(including the chat pytel, the ceo, and ben orenstein) on any topic.&nbsp;</p>


<p>If you do any kind of front end text editing, Emmet (formerly zen-coding) is definitely <a href="http://docs.emmet.io/">worth a look.</a>&nbsp;&nbsp;</p>


<p>Log for 5/8 - 5/11</p>


<ul>
<li>Thoughtbot - Test Driven Rails, Writing Integration Tests</li>
<li>Thoughtbot - Humans Present tmux</li>
<li><a href="http://www.youtube.com/watch?v=vHdiXoHKSgU">Ruby Productivity with Vim and Tmux</a> talk</li>
<li>Started jumpstart labs event-manager tutorial (will try this tutorial entirely in vim)</li>
<li>Ruby Rogues - Episode 104, Book Club discussing The Rails View&nbsp;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tapas]]></title>
    <link href="http://djquan.github.io/blog/2013/05/07/tapas/"/>
    <updated>2013-05-07T16:08:00-04:00</updated>
    <id>http://djquan.github.io/blog/2013/05/07/tapas</id>
    <content type="html"><![CDATA[<p><p>Ruby Tapas are short screencasts that cover small topics of the Ruby language.   Access to them is $9/month, and the creator (Avdi Grimm) releases three per week.   Go to the site and listen to any number of the free ones he provides and you will realize that it is a great bargain.  I&#8217;m currently working my way through them all and learning a lot. </p>
<p><a href="http://testfirst.org/learn_ruby">Test First Ruby</a> is a pretty interesting way to practice programming.  It&#8217;s a lot like RubyKoans in the sense that it relies on TDD.  There are many chapters with different objects.  For example, one chapter has you create a pig-latin converter.  Another tasks you to create a Reverse Polish Notion calculator.   Some are a lot simpler, like extending the Array class to add a function (of course, whether doing so is a smart idea is another thing). </p>
<p>A goal for the coming week is to check out some front-end resources.  I love playing around and programming in Ruby, but it&#8217;s not the only thing I need to learn well. </p>
<p>Log for 5/2 - 5/7</p>
<ul><li>Ruby Tapas - #1 - 10</li>
<li>Completed Test First Ruby</li>
</ul></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Efficiency]]></title>
    <link href="http://djquan.github.io/blog/2013/05/01/efficiency/"/>
    <updated>2013-05-01T16:14:00-04:00</updated>
    <id>http://djquan.github.io/blog/2013/05/01/efficiency</id>
    <content type="html"><![CDATA[<p><p><span>A major lesson I&#8217;ve learned from experimenting with vim is that efficiency does matter, no matter the editor.  The tools a person chooses are important, and it&#8217;s important to be efficient and precise with them.  </span></p>
<p>In vimadventures, they have these levels where you have to accomplish certain editing and navigating texts within a certain number of keystrokes. The goal is to make you think about it now, so that it can be engrained later.  </p>
<p>I&#8217;m still up in the air about making it my primary editor, but it has changed the way I approach Sublime Text.  I&#8217;m constantly asking, is there a way I can do <em>x </em>without reaching for the mouse and without pressing too many keys.   To rephrase an earlier statement, the tools a person chooses are important, but it&#8217;s more important to be efficient and precise with them than choosing the perfect one. </p>
<p>This <a href="https://www.hackerschool.com/manual">manual</a> by hacker school is pretty awesome.  The parts on social rules and pair programming are worth a gander.</p>
<p>Toying around with moving the &#8220;Curriculum&#8221; session <a href="https://trello.com/b/NApK9yRl">to a Trello board</a>.  It&#8217;s easier to maintain, allows any trello user to comment, and will help me get used to trello.</p>
<p>Log for 4/30 - 5/1</p>
<ul><li>Started Test-First-Ruby</li>
<li><a href="https://tutsplus.com/course/improve-workflow-in-sublime-text-2/">Tuts+ tutorial</a> on setting up a good ST2 workflow</li>
<li>Spent a lot of time trying to get an efficient workflow&#8230;went back and forth between vim and ST2 a lot.  I&#8217;m working on posting <a href="https://trello.com/board/my-setup/5181b0017dca609775002b0d">my current setup </a>with both on trello.  </li>
</ul></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughtbot - Intermediate]]></title>
    <link href="http://djquan.github.io/blog/2013/04/29/thoughtbot-intermediate/"/>
    <updated>2013-04-29T16:16:00-04:00</updated>
    <id>http://djquan.github.io/blog/2013/04/29/thoughtbot-intermediate</id>
    <content type="html"><![CDATA[<p><p><span>I finished Thoughtbot&#8217;s Intermediate Ruby on Rails Workshop.  I, without a doubt, learned a lot from it.  I</span><span>t works out to being $100 with a Learn Prime subscription.   For that price, you get the material (approximately four hours of video), and constant access to the instructor and office hours every week.  I&#8217;d recommend this workshop for this access more than the content (which was quite good too).   I&#8217;m going to be their taking online Test Driven Rails Workshop in May. </span></p>
<p>The Well Grounded Rubyist is an amazing book.  I have a much better understanding of Ruby after reading it.   The first half of the book really prepares you for the second, and it goes from good to amazing in Chapter 10: Enumerables.   It is a long book, but I highly recommend taking a look as it greatly enhanced my comprehension (and love) of Ruby.  </p>
<ul><li><span>Learning more about regular expressions and MatchData has definitely made them less scary(and kind of exciting!).  </span></li>
<li><span>Learning more about the enumerable module gives me a better picture of when to use each method.   Also, knowing that anything can be made to be enumerable-like by adding one method (and an include) is exciting. </span></li>
</ul><p><span>I&#8217;m playing around with zsh (and oh-my-zsh), and I really like it so far.  Tons of great functionality right from installing it.</span></p>
<p>I also started playing around with vim; I&#8217;m not as sure about that, but it&#8217;s getting more appealing the more I learn.  I figure, even if I don&#8217;t end up using it as my full-time text editor (ST2 is so shiny), it&#8217;s still good to have a grasp of it.  Although as I&#8217;m writing this, <a href="http://xkcd.com/1205/">xkcd&#8217;s newest comic</a> asks how long can you work on making a routine task more efficient before you&#8217;re spending more time than you save.</p>
<p>Project Euler gives language agnostic coding challenges requiring you to create code to help you set up a math problem.  For example, find all the sum of the even Fibonacci numbers up to four million.  They&#8217;re great exercises to work through to help improve basic programming.  </p>
<p><a href="http://news.yahoo.com/blogs/this-could-be-big-abc-news/back-school-job-150849131.html?vp=1">A new article (and video) on App Academy.</a></p>
<p>Log for 4/22 - 4/29</p>
<ul><li>Finished Thoughtbot&#8217;s Intermediate Ruby on Rails Workshop</li>
<li>Introduction to Thoughbot&#8217;s Test Driven Rails</li>
<li>Finished Well Grounded Rubyist</li>
<li>vimtutor</li>
<li>PeepCode -  Episode 46, Smash into Vim I</li>
<li>PeepCode -  Episode 47, Smash into Vim II</li>
<li>Thoughtbot - Vim for Rails Developers</li>
<li>Started vimadventures</li>
<li>Started with Project Euler</li>
</ul></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Older posts..]]></title>
    <link href="http://djquan.github.io/blog/2013/04/28/older-posts/"/>
    <updated>2013-04-28T16:17:00-04:00</updated>
    <id>http://djquan.github.io/blog/2013/04/28/older-posts</id>
    <content type="html"><![CDATA[<p>Older posts can be found at <a href="http://dan-quan.tumblr.com">dan-quan.tumblr.com</a></p>
]]></content>
  </entry>
  
</feed>
